import { useState, useEffect } from 'react';


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ hex –≤ —á–∏—Å–ª–æ
function hexToNumber(hexString) {
  // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 0x –µ—Å–ª–∏ –µ—Å—Ç—å
  const cleanHex = hexString.startsWith('0x') ? hexString.slice(2) : hexString;
  return parseInt(cleanHex, 16);
}

function bigIntReplacer(key, value) {
  if (typeof value === 'bigint') {
    return value.toString();
  }
  return value;
}

// Function to reverse TXID from API format to standard format
function reverseTxid(txid) {
  const bytes = [];
  for (let i = 0; i < txid.length; i += 2) {
    bytes.push(txid.substr(i, 2));
  }
  return bytes.reverse().join('');
}

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ—Ä–∞–Ω–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
 * @param address - –ë–∏—Ç–∫–æ–∏–Ω-–∞–¥—Ä–µ—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
 * @param protocolTag - –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
 * @param tokenFilter - –§–∏–ª—å—Ç—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞
 */
export function useAlkaneBalance(
  address, 
  protocolTag = '1',
  tokenFilter
) {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [data, setData] = useState(null);
  const [processedData, setProcessedData] = useState({
    outpoints: [],
    balanceSheet: []
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ hex –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  const normalizeHex = (value) => {
    if (typeof value === 'number') return value;
    return hexToNumber(value);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ ID
  const filterTokensByID = (outpoints) => {
    if (!tokenFilter) {
      // –ï—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –Ω–µ –∑–∞–¥–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± outpoint
      return outpoints.flatMap(outpoint => 
        outpoint.runes.map(rune => ({
          ...rune,
          outpoint: {
            txid: outpoint.txid, // API format (reversed)
            standardTxid: outpoint.standardTxid, // Standard format for explorers
            vout: outpoint.vout
          },
          output: {
            value: outpoint.value,
            script: outpoint.script || null
          },
          height: outpoint.height || null,
          txindex: outpoint.txindex || null
        }))
      );
    }

    const targetBlock = normalizeHex(tokenFilter.block);
    const targetTx = normalizeHex(tokenFilter.tx);

    const filteredTokensWithOutpoints = [];

    outpoints.forEach(outpoint => {
      outpoint.runes.forEach(rune => {
        if (rune.id.block === targetBlock && rune.id.tx === targetTx) {
          filteredTokensWithOutpoints.push({
            ...rune,
            outpoint: {
              txid: outpoint.txid, // API format (reversed)
              standardTxid: outpoint.standardTxid, // Standard format for explorers
              vout: outpoint.vout
            },
            output: {
              value: outpoint.value,
              script: outpoint.script || null
            },
            height: outpoint.height || null,
            txindex: outpoint.txindex || null
          });
        }
      });
    });

    return filteredTokensWithOutpoints;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
  const fetchProtorunesByAddress = async (addr, tag) => {
    console.log('ü™ô –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–æ–≤...');
    setLoading(true);
    setError(null);
    
    try {
      const requestBody = {
        jsonrpc: "2.0",
        method: "alkanes_protorunesbyaddress",
        params: [
          {
            address: addr,
            protocolTag: tag
          }
        ],
        id: 1
      };
      
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–æ–≤:', requestBody);
      
      const response = await fetch("http://localhost:18888", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(requestBody, bigIntReplacer)
      });
      
      console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤:', response.status, response.statusText);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const responseData = await response.json();


      
      if (responseData.error) {
        throw new Error(responseData.error.message);
      }
      
      setData(responseData);
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (responseData.result) {
        const { outpoints, balanceSheet } = responseData.result;
        console.log('üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–æ–≤:', { outpoints, balanceSheet });
        
        const processedOutpoints = outpoints 
          ? outpoints.map((outpoint, index) => ({
              index: index + 1,
              txid: outpoint.outpoint.txid, // API format (reversed)
              standardTxid: reverseTxid(outpoint.outpoint.txid), // Standard format
              vout: outpoint.outpoint.vout, // VOUT is already correct
              value: outpoint.output.value,
              script: outpoint.output.script,
              height: outpoint.height,
              txindex: outpoint.txindex,
              runes: outpoint.runes 
                ? outpoint.runes.map((rune, runeIndex) => {
                    const hexBalance = rune.balance;
                    const decimalBalance = hexToNumber(hexBalance);
                    const actualBalance = decimalBalance;
                    
                    return {
                      index: runeIndex + 1,
                      id: {
                        block: hexToNumber(rune.rune.id.block),
                        tx: hexToNumber(rune.rune.id.tx)
                      },
                      name: rune.rune.name,
                      spacedName: rune.rune.spacedName,
                      symbol: rune.rune.symbol,
                      balance: actualBalance.toString(),
                      divisibility: rune.rune.divisibility,
                      rawBalance: decimalBalance
                    };
                  })
                : []
            }))
          : [];
        
        setProcessedData({
          outpoints: processedOutpoints,
          balanceSheet: balanceSheet || []
        });
        
        console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï:', {
          processedOutpoints,
          balanceSheet,
          totalOutpoints: processedOutpoints.length
        });
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ—Ç–æ—Ä–∞–Ω–æ–≤:", err);
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞ –∏–ª–∏ protocolTag
  useEffect(() => {
    const hardcodedAddress = 'bcrt1pa3s736wjyesxn8sxr3nrwetk3ccz8qta5h3flnlnlj9rmecerknq64ncj3';
    fetchProtorunesByAddress(hardcodedAddress, protocolTag);
  }, [address, protocolTag]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const refetch = () => {
    const hardcodedAddress = 'bcrt1pa3s736wjyesxn8sxr3nrwetk3ccz8qta5h3flnlnlj9rmecerknq64ncj3';
    fetchProtorunesByAddress(hardcodedAddress, protocolTag);
  };

  // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –∏ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
  const filteredTokens = filterTokensByID(processedData.outpoints);

  // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  console.log('üèÜ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–û–ö–ï–ù–û–í:', {
    filteredTokens,
    filteredTokensCount: filteredTokens.length,
    hasProcessedData: processedData.outpoints.length > 0
  });

  return {
    loading,
    error,
    rawData: data,
    refetch,
    filteredTokens
  };
}

export default useAlkaneBalance;
