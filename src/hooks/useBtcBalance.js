import { useState, useEffect } from 'react';

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è BTC –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ Esplora API
 * @returns –û–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞
 */
export function useBtcBalance() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [data, setData] = useState(null);

  // –ó–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
  const hardcodedAddress = 'bcrt1qghccwgtzly6pfewp05z92lmc0m7wu9sva467ch';

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
  const fetchBtcBalance = async () => {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—Ä–æ—Å BTC –±–∞–ª–∞–Ω—Å–∞...');
    setLoading(true);
    setError(null);
    
    try {
      const requestBody = {
        jsonrpc: "2.0",
        id: 1,
        method: "esplora_address",
        params: [hardcodedAddress]
      };
      
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', requestBody);
      
      const response = await fetch("http://localhost:18888", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(requestBody)
      });
      
      console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response.status, response.statusText);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const responseData = await response.json();
      console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', responseData);
      
      if (responseData.error) {
        throw new Error(responseData.error.message);
      }
      
      setData(responseData);
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
      const newConfirmedBalance = responseData.result ? 
        (responseData.result.chain_stats.funded_txo_sum - responseData.result.chain_stats.spent_txo_sum) : 0;
      const newUnconfirmedBalance = responseData.result ? 
        (responseData.result.mempool_stats.funded_txo_sum - responseData.result.mempool_stats.spent_txo_sum) : 0;
      const newTotalBalance = newConfirmedBalance + newUnconfirmedBalance;
      const newBalanceBTC = newTotalBalance / 100000000;
      
      console.log('üî• –ù–û–í–´–ï –í–´–ß–ò–°–õ–ï–ù–ù–´–ï –ë–ê–õ–ê–ù–°–´:', {
        newConfirmedBalance,
        newUnconfirmedBalance, 
        newTotalBalance,
        newBalanceBTC
      });
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ BTC –±–∞–ª–∞–Ω—Å–∞:", err);
    } finally {
      setLoading(false);
      console.log('üèÅ –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω');
    }
  };

  // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    fetchBtcBalance();
  }, []);

  // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–≥–¥–∞ data –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
  useEffect(() => {
    console.log('üìù Data –∏–∑–º–µ–Ω–∏–ª–∏—Å—å:', data);
  }, [data]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const refetch = () => {
    fetchBtcBalance();
  };

  // –í—ã—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
  const confirmedBalance = data?.result ? 
    (data.result.chain_stats.funded_txo_sum - data.result.chain_stats.spent_txo_sum) : 0;
  
  const unconfirmedBalance = data?.result ? 
    (data.result.mempool_stats.funded_txo_sum - data.result.mempool_stats.spent_txo_sum) : 0;
  
  const totalBalance = confirmedBalance + unconfirmedBalance;
  const balanceBTC = totalBalance / 100000000; // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–∞—Ç–æ—à–∏ –≤ BTC

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
  console.log('üí∞ –í—ã—á–∏—Å–ª–µ–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã:', {
    confirmedBalance,
    unconfirmedBalance,
    totalBalance,
    balanceBTC,
    hasData: !!data?.result
  });

  return {
    loading,
    error,
    rawData: data,
    balance: totalBalance,
    balanceBTC,
    confirmedBalance,
    unconfirmedBalance,
    refetch
  };
}

export default useBtcBalance;
