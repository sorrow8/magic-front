import { useState, useCallback } from 'react';

export function useTarotCard() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [cardData, setCardData] = useState(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è hex –≤ UTF-8
  const hexToUtf8 = useCallback((hex) => {
    if (hex.startsWith("0x")) hex = hex.slice(2);
    const bytes = new Uint8Array(hex.length / 2);
    for (let i = 0; i < hex.length; i += 2) {
      bytes[i / 2] = parseInt(hex.substr(i, 2), 16);
    }
    const decoder = new TextDecoder('utf-8');
    return decoder.decode(bytes);
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏
  const simulateAlkanes = useCallback(async (params = {}) => {
    setLoading(true);
    setError(null);

    try {
      const requestBody = {
        "jsonrpc": "2.0",
        "id": 1,
        "method": "alkanes_simulate",
        "params": [
          {
            "alkanes": [],
            "transaction": "0x",
            "block": "0x",
            "height": "20000",
            "txindex": 0,
            "target": { "block": "2", "tx": "14" },
            "inputs": ["1000"],
            "pointer": 0,
            "refundPointer": 0,
            "vout": 0,
            ...params // –ü–æ–∑–≤–æ–ª—è–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
          }
        ]
      };

      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', requestBody);

      const response = await fetch('http://localhost:18888', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ - —Å—Ç–∞—Ç—É—Å:', response.status);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('üì¶ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);

      if (data.error) {
        throw new Error(`RPC error: ${data.error.message || 'Unknown error'}`);
      }

      const result = data.result;
      
      if (!result) {
        throw new Error('No result in response');
      }

      console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      console.log('üîç –ü–æ–ª–µ result.data:', result.data);
      console.log('üîç –ü–æ–ª–µ result.execution.data:', result.execution?.data);

      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º hex –¥–∞–Ω–Ω—ã–µ - –¥–∞–Ω–Ω—ã–µ –ª–µ–∂–∞—Ç –≤ result.execution.data
      let decodedData = null;
      const hexData = result.execution?.data || result.data;
      
      if (hexData && hexData !== "0x") {
        try {
          decodedData = hexToUtf8(hexData);
          console.log('‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', decodedData);
        } catch (decodeError) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å hex –¥–∞–Ω–Ω—ã–µ:', decodeError);
          decodedData = hexData; // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å
        }
      } else {
        console.warn('‚ö†Ô∏è –ü–æ–ª–µ data –ø—É—Å—Ç–æ–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ result.execution.data –∏ result.data');
      }

      const cardResult = {
        status: result.status,
        gasUsed: result.gasUsed,
        execution: result.execution,
        decodedData: decodedData,
        rawData: hexData
      };

      setCardData(cardResult);
      return cardResult;

    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏:', err);
      setError(err.message);
      throw err;
    } finally {
      setLoading(false);
    }
  }, [hexToUtf8]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã —Ç–∞—Ä–æ
  const loadTarotCard = useCallback(async (cardParams) => {
    try {
      const result = await simulateAlkanes(cardParams);
      
      if (result.decodedData) {
        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ JS –∫–æ–¥ –∫–∞—Ä—Ç—ã, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        return result.decodedData;
      } else {
        throw new Error('No decoded data received');
      }
    } catch (err) {
      console.error('Error loading tarot card:', err);
      
      // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mock –¥–∞–Ω–Ω—ã–µ
      if (err.message.includes('Failed to fetch') || err.message.includes('HTTP error')) {
        console.log('üîÑ –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mock –¥–∞–Ω–Ω—ã–µ');
        throw new Error('Server unavailable. Please start the server on localhost:18888 or use fallback mode.');
      }
      
      throw err;
    }
  }, [simulateAlkanes]);



  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JS –∫–æ–¥–∞ –∫–∞—Ä—Ç—ã
  const executeTarotCard = useCallback((jsCode, containerId) => {
    try {
      console.log('üî• –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript –∫–æ–¥:', jsCode.substring(0, 200) + '...');
      
      // –ü—Ä–æ—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–¥ –∏ —Å—Ä–∞–∑—É –∏—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é
      const wrappedCode = `
        ${jsCode}
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        if (typeof createTarotCard === 'function') {
          console.log('üì¶ –§—É–Ω–∫—Ü–∏—è createTarotCard –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–∑—ã–≤–∞–µ–º...');
          createTarotCard('${containerId}');
          window.createTarotCard = createTarotCard; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ window
        } else {
          console.error('‚ùå –§—É–Ω–∫—Ü–∏—è createTarotCard –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∫–æ–¥–µ');
        }
      `;
      
      eval(wrappedCode);
      console.log('‚úÖ JavaScript –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω');
      
      return true;
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ JS –∫–æ–¥–∞ –∫–∞—Ä—Ç—ã:', err);
      setError(`Failed to execute tarot card: ${err.message}`);
      return false;
    }
  }, []);

  return {
    loading,
    error,
    cardData,
    simulateAlkanes,
    loadTarotCard,
    executeTarotCard,
    hexToUtf8
  };
} 